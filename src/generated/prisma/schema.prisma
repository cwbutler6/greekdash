// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanType {
  FREE
  BASIC
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
  INCOMPLETE
}

enum MembershipRole {
  MEMBER
  ADMIN
  OWNER
  PENDING_MEMBER
}

model Chapter {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  joinCode         String   @default(uuid())
  publicInfo       String?  @db.Text
  primaryColor     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  stripeCustomerId String?

  // Relations
  memberships     Membership[] // One chapter has many memberships
  subscription    Subscription? // One chapter has one subscription
  invites         Invite[] // One chapter has many invites
  events          Event[] // One chapter has many events
  auditLogs       AuditLog[] // Audit logs for this chapter
  galleryImages   GalleryImage[] // One chapter has many gallery images
  contactMessages ContactMessage[] // One chapter has many contact messages

  // Finance relations
  budgets      Budget[] // One chapter has many budgets
  expenses     Expense[] // One chapter has many expenses
  duesPayments DuesPayment[] // One chapter has many dues payments
  transactions Transaction[] // One chapter has many transactions
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Hashed password for credentials provider
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts        Account[] // One user has many auth accounts
  sessions        Session[] // One user has many sessions
  memberships     Membership[] // One user can be a member of multiple chapters
  acceptedInvites Invite[]     @relation("acceptedInvites") // Invites that were accepted by this user
  createdInvites  Invite[]     @relation("createdInvites") // Invites created by this user
  createdEvents   Event[]      @relation("createdEvents") // Events created by this user
  rsvps           EventRSVP[] // RSVPs to events
  auditLogs       AuditLog[] // Audit logs created by this user

  // Finance relations
  submittedExpenses Expense[]     @relation("submittedExpenses") // Expenses submitted by this user
  approvedExpenses  Expense[]     @relation("approvedExpenses") // Expenses approved by this user
  duesPayments      DuesPayment[] // Dues payments made by this user
}

model Membership {
  id        String         @id @default(cuid())
  role      MembershipRole @default(MEMBER)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Foreign keys
  userId    String
  chapterId String

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId]) // A user can only have one membership per chapter
  @@index([chapterId])
  @@index([userId])
}

model Subscription {
  id                   String             @id @default(cuid())
  plan                 PlanType           @default(FREE)
  status               SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Foreign key
  chapterId String @unique

  // Relation
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invite {
  id           String         @id @default(cuid())
  email        String
  token        String         @unique @default(uuid())
  role         MembershipRole @default(MEMBER)
  createdAt    DateTime       @default(now())
  expiresAt    DateTime       @default(dbgenerated("NOW() + interval '7 days'"))
  accepted     Boolean        @default(false)
  acceptedAt   DateTime?
  acceptedById String?
  createdById  String?

  // Foreign key
  chapterId String

  // Relation
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  acceptedBy User?   @relation("acceptedInvites", fields: [acceptedById], references: [id])
  createdBy  User?   @relation("createdInvites", fields: [createdById], references: [id])

  @@index([chapterId])
  @@index([token])
  @@index([acceptedById])
  @@index([createdById])
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELED
}

enum RSVPStatus {
  GOING
  NOT_GOING
  MAYBE
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  location    String
  startDate   DateTime
  endDate     DateTime
  capacity    Int?
  isPublic    Boolean     @default(true)
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign keys
  chapterId   String
  createdById String

  // Relations
  chapter   Chapter     @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdBy User        @relation("createdEvents", fields: [createdById], references: [id])
  rsvps     EventRSVP[] // All RSVPs for this event

  @@index([chapterId])
  @@index([createdById])
  @@index([startDate])
  @@index([status])
}

model EventRSVP {
  id        String     @id @default(cuid())
  status    RSVPStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Foreign keys
  eventId String
  userId  String

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // A user can only have one RSVP per event
  @@index([eventId])
  @@index([userId])
  @@index([status])
}

model AuditLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  action     String
  targetType String
  targetId   String?
  metadata   Json?

  // Foreign keys
  userId    String
  chapterId String

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
  @@index([userId])
  @@index([action])
  @@index([targetType])
  @@index([createdAt])
}

model GalleryImage {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key
  chapterId String

  // Relation
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String   @db.Text
  createdAt DateTime @default(now())

  // Foreign key
  chapterId String

  // Relation
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
  @@index([createdAt])
}

// Finance-related enums
enum BudgetStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ExpenseStatus {
  PENDING
  APPROVED
  DENIED
  PAID
}

enum TransactionType {
  DUES_PAYMENT
  EXPENSE
  INCOME
  TRANSFER
  REFUND
  OTHER
}

model Budget {
  id          String       @id @default(cuid())
  name        String
  description String?      @db.Text
  startDate   DateTime
  endDate     DateTime
  amount      Float
  status      BudgetStatus @default(PLANNING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Foreign key
  chapterId String

  // Relations
  chapter  Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  expenses Expense[] // Expenses allocated to this budget

  @@index([chapterId])
  @@index([status])
  @@index([startDate])
}

model Expense {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  amount      Float
  receiptUrl  String?
  status      ExpenseStatus @default(PENDING)
  submittedAt DateTime      @default(now())
  approvedAt  DateTime?
  paidAt      DateTime?

  // Foreign keys
  chapterId     String
  budgetId      String?
  submittedById String
  approvedById  String?

  // Relations
  chapter     Chapter      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  budget      Budget?      @relation(fields: [budgetId], references: [id])
  submittedBy User         @relation("submittedExpenses", fields: [submittedById], references: [id])
  approvedBy  User?        @relation("approvedExpenses", fields: [approvedById], references: [id])
  transaction Transaction? @relation("expenseTransaction")

  @@index([chapterId])
  @@index([budgetId])
  @@index([submittedById])
  @@index([approvedById])
  @@index([status])
}

model DuesPayment {
  id              String    @id @default(cuid())
  amount          Float
  dueDate         DateTime
  paidAt          DateTime?
  stripePaymentId String?
  stripeInvoiceId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Foreign keys
  chapterId String
  userId    String

  // Relations
  chapter     Chapter      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation("duesTransaction")

  @@index([chapterId])
  @@index([userId])
  @@index([dueDate])
  @@index([paidAt])
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        TransactionType
  description String?         @db.Text
  metadata    Json?
  createdAt   DateTime        @default(now())
  processedAt DateTime?

  // Foreign keys
  chapterId     String
  expenseId     String? @unique
  duesPaymentId String? @unique

  // Relations
  chapter     Chapter      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  expense     Expense?     @relation("expenseTransaction", fields: [expenseId], references: [id])
  duesPayment DuesPayment? @relation("duesTransaction", fields: [duesPaymentId], references: [id])

  @@index([chapterId])
  @@index([type])
  @@index([createdAt])
}
