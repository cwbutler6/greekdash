// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanType {
  FREE
  BASIC
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
  INCOMPLETE
}

enum MembershipRole {
  MEMBER
  ADMIN
  OWNER
}

model Chapter {
  id             String         @id @default(cuid())
  name           String
  slug           String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  stripeCustomerId String?       
  
  // Relations
  memberships    Membership[]   // One chapter has many memberships
  subscription   Subscription?  // One chapter has one subscription
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?      // Hashed password for credentials provider
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  accounts      Account[]     // One user has many auth accounts
  sessions      Session[]     // One user has many sessions
  memberships   Membership[]  // One user can be a member of multiple chapters
}

model Membership {
  id        String         @id @default(cuid())
  role      MembershipRole @default(MEMBER)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Foreign keys
  userId    String
  chapterId String
  
  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter   Chapter        @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  @@unique([userId, chapterId]) // A user can only have one membership per chapter
  @@index([chapterId])
  @@index([userId])
}

model Subscription {
  id                 String             @id @default(cuid())
  plan               PlanType           @default(FREE)
  status             SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  
  // Foreign key
  chapterId          String             @unique
  
  // Relation
  chapter            Chapter            @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
